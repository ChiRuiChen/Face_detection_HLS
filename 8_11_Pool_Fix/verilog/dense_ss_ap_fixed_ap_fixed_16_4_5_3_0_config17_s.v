// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_ss_ap_fixed_ap_fixed_16_4_5_3_0_config17_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_V_dout,
        data_V_V_empty_n,
        data_V_V_read,
        res_V_V_din,
        res_V_V_full_n,
        res_V_V_write
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_V_dout;
input   data_V_V_empty_n;
output   data_V_V_read;
output  [15:0] res_V_V_din;
input   res_V_V_full_n;
output   res_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_V_read;
reg[15:0] res_V_V_din;
reg res_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [11:0] w17_V_address0;
reg    w17_V_ce0;
wire   [28:0] w17_V_q0;
reg    data_V_V_blk_n;
wire    ap_CS_fsm_state3;
reg    res_V_V_blk_n;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire   [11:0] i_in_fu_212_p2;
reg   [11:0] i_in_reg_397;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln579_fu_206_p2;
wire  signed [20:0] sext_ln1116_cast_fu_227_p1;
reg  signed [20:0] sext_ln1116_cast_reg_407;
reg   [15:0] trunc_ln_reg_414;
reg  signed [5:0] tmp_11_reg_419;
reg  signed [5:0] tmp_12_reg_424;
reg  signed [5:0] tmp_13_reg_429;
wire   [15:0] acc_0_4_V_fu_304_p2;
reg   [15:0] acc_0_4_V_reg_434;
wire   [15:0] acc_0_0_V_fu_310_p2;
reg   [15:0] acc_0_0_V_reg_439;
wire    ap_CS_fsm_state4;
wire   [15:0] acc_0_1_V_fu_327_p2;
reg   [15:0] acc_0_1_V_reg_444;
wire   [15:0] acc_0_2_V_fu_345_p2;
reg   [15:0] acc_0_2_V_reg_449;
wire    ap_CS_fsm_state5;
wire   [15:0] acc_0_3_V_fu_363_p2;
wire    ap_CS_fsm_state6;
reg   [15:0] tmp_V_135_reg_130;
reg    ap_block_state1;
reg   [15:0] tmp_V_134_reg_143;
reg   [15:0] tmp_V_133_reg_156;
reg   [15:0] tmp_V_132_reg_169;
reg   [15:0] tmp_V_131_reg_182;
reg   [11:0] i_in_0_reg_195;
wire   [63:0] zext_ln587_fu_218_p1;
wire  signed [5:0] trunc_ln587_fu_223_p1;
wire  signed [20:0] mul_ln1118_fu_369_p2;
wire   [4:0] tmp_1_fu_274_p4;
wire  signed [4:0] mul_ln1118_4_fu_288_p0;
wire  signed [15:0] mul_ln1118_4_fu_288_p1;
wire   [20:0] mul_ln1118_4_fu_288_p2;
wire   [15:0] trunc_ln708_4_fu_294_p4;
wire  signed [20:0] mul_ln1118_1_fu_376_p2;
wire   [15:0] trunc_ln708_1_fu_318_p4;
wire  signed [20:0] mul_ln1118_2_fu_382_p2;
wire   [15:0] trunc_ln708_2_fu_336_p4;
wire  signed [20:0] mul_ln1118_3_fu_388_p2;
wire   [15:0] trunc_ln708_3_fu_354_p4;
wire  signed [15:0] mul_ln1118_fu_369_p1;
wire  signed [15:0] mul_ln1118_1_fu_376_p1;
wire  signed [15:0] mul_ln1118_2_fu_382_p1;
wire  signed [15:0] mul_ln1118_3_fu_388_p1;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 11'd1;
end

dense_ss_ap_fixed_ap_fixed_16_4_5_3_0_config17_s_w17_V #(
    .DataWidth( 29 ),
    .AddressRange( 2304 ),
    .AddressWidth( 12 ))
w17_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w17_V_address0),
    .ce0(w17_V_ce0),
    .q0(w17_V_q0)
);

myproject_mul_mul_6s_16s_21_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 21 ))
myproject_mul_mul_6s_16s_21_1_1_U244(
    .din0(trunc_ln587_fu_223_p1),
    .din1(mul_ln1118_fu_369_p1),
    .dout(mul_ln1118_fu_369_p2)
);

myproject_mul_mul_6s_16s_21_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 21 ))
myproject_mul_mul_6s_16s_21_1_1_U245(
    .din0(tmp_11_reg_419),
    .din1(mul_ln1118_1_fu_376_p1),
    .dout(mul_ln1118_1_fu_376_p2)
);

myproject_mul_mul_6s_16s_21_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 21 ))
myproject_mul_mul_6s_16s_21_1_1_U246(
    .din0(tmp_12_reg_424),
    .din1(mul_ln1118_2_fu_382_p1),
    .dout(mul_ln1118_2_fu_382_p2)
);

myproject_mul_mul_6s_16s_21_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 21 ))
myproject_mul_mul_6s_16s_21_1_1_U247(
    .din0(tmp_13_reg_429),
    .din1(mul_ln1118_3_fu_388_p1),
    .dout(mul_ln1118_3_fu_388_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_in_0_reg_195 <= i_in_reg_397;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_in_0_reg_195 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_V_131_reg_182 <= acc_0_0_V_reg_439;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_131_reg_182 <= 16'd64870;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_V_132_reg_169 <= acc_0_1_V_reg_444;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_132_reg_169 <= 16'd40;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_V_133_reg_156 <= acc_0_2_V_reg_449;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_133_reg_156 <= 16'd65430;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_V_134_reg_143 <= acc_0_3_V_fu_363_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_134_reg_143 <= 16'd64737;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_V_135_reg_130 <= acc_0_4_V_reg_434;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_135_reg_130 <= 16'd65213;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        acc_0_0_V_reg_439 <= acc_0_0_V_fu_310_p2;
        acc_0_1_V_reg_444 <= acc_0_1_V_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        acc_0_2_V_reg_449 <= acc_0_2_V_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        acc_0_4_V_reg_434 <= acc_0_4_V_fu_304_p2;
        sext_ln1116_cast_reg_407 <= sext_ln1116_cast_fu_227_p1;
        tmp_11_reg_419 <= {{w17_V_q0[11:6]}};
        tmp_12_reg_424 <= {{w17_V_q0[17:12]}};
        tmp_13_reg_429 <= {{w17_V_q0[23:18]}};
        trunc_ln_reg_414 <= {{mul_ln1118_fu_369_p2[20:5]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_in_reg_397 <= i_in_fu_212_p2;
    end
end

always @ (*) begin
    if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_V_blk_n = data_V_V_empty_n;
    end else begin
        data_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_V_read = 1'b1;
    end else begin
        data_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        res_V_V_blk_n = res_V_V_full_n;
    end else begin
        res_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((res_V_V_full_n == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            res_V_V_din = tmp_V_135_reg_130;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            res_V_V_din = tmp_V_134_reg_143;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            res_V_V_din = tmp_V_133_reg_156;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            res_V_V_din = tmp_V_132_reg_169;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            res_V_V_din = tmp_V_131_reg_182;
        end else begin
            res_V_V_din = 'bx;
        end
    end else begin
        res_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7)))) begin
        res_V_V_write = 1'b1;
    end else begin
        res_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        w17_V_ce0 = 1'b1;
    end else begin
        w17_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln579_fu_206_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state7 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_0_0_V_fu_310_p2 = (tmp_V_131_reg_182 + trunc_ln_reg_414);

assign acc_0_1_V_fu_327_p2 = (tmp_V_132_reg_169 + trunc_ln708_1_fu_318_p4);

assign acc_0_2_V_fu_345_p2 = (tmp_V_133_reg_156 + trunc_ln708_2_fu_336_p4);

assign acc_0_3_V_fu_363_p2 = (tmp_V_134_reg_143 + trunc_ln708_3_fu_354_p4);

assign acc_0_4_V_fu_304_p2 = (tmp_V_135_reg_130 + trunc_ln708_4_fu_294_p4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign i_in_fu_212_p2 = (i_in_0_reg_195 + 12'd1);

assign icmp_ln579_fu_206_p2 = ((i_in_0_reg_195 == 12'd2304) ? 1'b1 : 1'b0);

assign mul_ln1118_1_fu_376_p1 = sext_ln1116_cast_reg_407;

assign mul_ln1118_2_fu_382_p1 = sext_ln1116_cast_reg_407;

assign mul_ln1118_3_fu_388_p1 = sext_ln1116_cast_reg_407;

assign mul_ln1118_4_fu_288_p0 = tmp_1_fu_274_p4;

assign mul_ln1118_4_fu_288_p1 = sext_ln1116_cast_fu_227_p1;

assign mul_ln1118_4_fu_288_p2 = ($signed(mul_ln1118_4_fu_288_p0) * $signed(mul_ln1118_4_fu_288_p1));

assign mul_ln1118_fu_369_p1 = sext_ln1116_cast_fu_227_p1;

assign sext_ln1116_cast_fu_227_p1 = $signed(data_V_V_dout);

assign start_out = real_start;

assign tmp_1_fu_274_p4 = {{w17_V_q0[28:24]}};

assign trunc_ln587_fu_223_p1 = w17_V_q0[5:0];

assign trunc_ln708_1_fu_318_p4 = {{mul_ln1118_1_fu_376_p2[20:5]}};

assign trunc_ln708_2_fu_336_p4 = {{mul_ln1118_2_fu_382_p2[20:5]}};

assign trunc_ln708_3_fu_354_p4 = {{mul_ln1118_3_fu_388_p2[20:5]}};

assign trunc_ln708_4_fu_294_p4 = {{mul_ln1118_4_fu_288_p2[20:5]}};

assign w17_V_address0 = zext_ln587_fu_218_p1;

assign zext_ln587_fu_218_p1 = i_in_0_reg_195;

endmodule //dense_ss_ap_fixed_ap_fixed_16_4_5_3_0_config17_s
