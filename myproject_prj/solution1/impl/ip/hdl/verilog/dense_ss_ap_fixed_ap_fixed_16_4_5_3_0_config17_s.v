// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_ss_ap_fixed_ap_fixed_16_4_5_3_0_config17_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_V_dout,
        data_V_V_empty_n,
        data_V_V_read,
        res_V_V_din,
        res_V_V_full_n,
        res_V_V_write
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_state6 = 7'd4;
parameter    ap_ST_fsm_state7 = 7'd8;
parameter    ap_ST_fsm_state8 = 7'd16;
parameter    ap_ST_fsm_state9 = 7'd32;
parameter    ap_ST_fsm_state10 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_V_dout;
input   data_V_V_empty_n;
output   data_V_V_read;
output  [15:0] res_V_V_din;
input   res_V_V_full_n;
output   res_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_V_read;
reg[15:0] res_V_V_din;
reg res_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [13:0] w17_V_address0;
reg    w17_V_ce0;
wire   [5:0] w17_V_q0;
wire   [13:0] w17_V_address1;
reg    w17_V_ce1;
wire   [5:0] w17_V_q1;
wire   [13:0] w17_V_address2;
reg    w17_V_ce2;
wire   [5:0] w17_V_q2;
wire   [13:0] w17_V_address3;
reg    w17_V_ce3;
wire   [5:0] w17_V_q3;
wire   [13:0] w17_V_address4;
reg    w17_V_ce4;
wire   [5:0] w17_V_q4;
reg    data_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln389_reg_369;
reg    res_V_V_blk_n;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg   [15:0] tmp_V_16_reg_164;
reg   [15:0] tmp_V_15_reg_177;
reg   [15:0] tmp_V_14_reg_190;
reg   [15:0] tmp_V_13_reg_203;
reg   [15:0] tmp_V_reg_216;
reg   [11:0] i_in_0_reg_229;
wire   [0:0] icmp_ln389_fu_270_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln389_reg_369_pp0_iter1_reg;
reg   [0:0] icmp_ln389_reg_369_pp0_iter2_reg;
wire   [11:0] i_in_fu_276_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [15:0] tmp_V_18_reg_403;
reg   [5:0] w17_V_load_reg_412;
reg   [5:0] w17_V_load_1_reg_417;
reg   [5:0] w17_V_load_2_reg_422;
reg   [5:0] w17_V_load_3_reg_427;
reg   [5:0] w17_V_load_4_reg_432;
wire   [15:0] acc_0_V_fu_339_p2;
reg    ap_enable_reg_pp0_iter3;
wire   [15:0] acc_1_V_fu_345_p2;
wire   [15:0] acc_2_V_fu_351_p2;
wire   [15:0] acc_3_V_fu_357_p2;
wire   [15:0] acc_4_V_fu_363_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
wire   [15:0] grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_240_ap_return;
reg    grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_240_ap_ce;
wire    ap_block_state2_pp0_stage0_iter0_ignore_call8;
reg    ap_block_state3_pp0_stage0_iter1_ignore_call8;
wire    ap_block_state4_pp0_stage0_iter2_ignore_call8;
wire    ap_block_state5_pp0_stage0_iter3_ignore_call8;
reg    ap_block_pp0_stage0_11001_ignoreCallOp51;
wire   [15:0] grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_246_ap_return;
reg    grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_246_ap_ce;
wire    ap_block_state2_pp0_stage0_iter0_ignore_call14;
reg    ap_block_state3_pp0_stage0_iter1_ignore_call14;
wire    ap_block_state4_pp0_stage0_iter2_ignore_call14;
wire    ap_block_state5_pp0_stage0_iter3_ignore_call14;
reg    ap_block_pp0_stage0_11001_ignoreCallOp52;
wire   [15:0] grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_252_ap_return;
reg    grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_252_ap_ce;
wire    ap_block_state2_pp0_stage0_iter0_ignore_call20;
reg    ap_block_state3_pp0_stage0_iter1_ignore_call20;
wire    ap_block_state4_pp0_stage0_iter2_ignore_call20;
wire    ap_block_state5_pp0_stage0_iter3_ignore_call20;
reg    ap_block_pp0_stage0_11001_ignoreCallOp53;
wire   [15:0] grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_258_ap_return;
reg    grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_258_ap_ce;
wire    ap_block_state2_pp0_stage0_iter0_ignore_call26;
reg    ap_block_state3_pp0_stage0_iter1_ignore_call26;
wire    ap_block_state4_pp0_stage0_iter2_ignore_call26;
wire    ap_block_state5_pp0_stage0_iter3_ignore_call26;
reg    ap_block_pp0_stage0_11001_ignoreCallOp54;
wire   [15:0] grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_264_ap_return;
reg    grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_264_ap_ce;
wire    ap_block_state2_pp0_stage0_iter0_ignore_call32;
reg    ap_block_state3_pp0_stage0_iter1_ignore_call32;
wire    ap_block_state4_pp0_stage0_iter2_ignore_call32;
wire    ap_block_state5_pp0_stage0_iter3_ignore_call32;
reg    ap_block_pp0_stage0_11001_ignoreCallOp55;
wire   [63:0] zext_ln399_fu_290_p1;
wire   [63:0] zext_ln399_1_fu_301_p1;
wire   [63:0] zext_ln399_2_fu_312_p1;
wire   [63:0] zext_ln399_3_fu_323_p1;
wire   [63:0] zext_ln399_4_fu_334_p1;
wire   [12:0] zext_ln389_1_fu_286_p1;
wire   [12:0] add_ln398_fu_295_p2;
wire   [12:0] add_ln398_1_fu_306_p2;
wire   [13:0] zext_ln389_fu_282_p1;
wire   [13:0] add_ln398_2_fu_317_p2;
wire   [13:0] add_ln398_3_fu_328_p2;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

dense_ss_ap_fixed_ap_fixed_16_4_5_3_0_config17_s_w17_V #(
    .DataWidth( 6 ),
    .AddressRange( 11520 ),
    .AddressWidth( 14 ))
w17_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w17_V_address0),
    .ce0(w17_V_ce0),
    .q0(w17_V_q0),
    .address1(w17_V_address1),
    .ce1(w17_V_ce1),
    .q1(w17_V_q1),
    .address2(w17_V_address2),
    .ce2(w17_V_ce2),
    .q2(w17_V_q2),
    .address3(w17_V_address3),
    .ce3(w17_V_ce3),
    .q3(w17_V_q3),
    .address4(w17_V_address4),
    .ce4(w17_V_ce4),
    .q4(w17_V_q4)
);

product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_240(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .a_V(tmp_V_18_reg_403),
    .w_V(w17_V_load_reg_412),
    .ap_return(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_240_ap_return),
    .ap_ce(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_240_ap_ce)
);

product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_246(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .a_V(tmp_V_18_reg_403),
    .w_V(w17_V_load_1_reg_417),
    .ap_return(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_246_ap_return),
    .ap_ce(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_246_ap_ce)
);

product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_252(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .a_V(tmp_V_18_reg_403),
    .w_V(w17_V_load_2_reg_422),
    .ap_return(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_252_ap_return),
    .ap_ce(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_252_ap_ce)
);

product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_258(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .a_V(tmp_V_18_reg_403),
    .w_V(w17_V_load_3_reg_427),
    .ap_return(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_258_ap_return),
    .ap_ce(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_258_ap_ce)
);

product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_264(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .a_V(tmp_V_18_reg_403),
    .w_V(w17_V_load_4_reg_432),
    .ap_return(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_264_ap_return),
    .ap_ce(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_264_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln389_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_in_0_reg_229 <= i_in_fu_276_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_in_0_reg_229 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln389_reg_369_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_13_reg_203 <= acc_1_V_fu_345_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_13_reg_203 <= 16'd40;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln389_reg_369_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_14_reg_190 <= acc_2_V_fu_351_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_14_reg_190 <= 16'd65430;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln389_reg_369_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_15_reg_177 <= acc_3_V_fu_357_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_15_reg_177 <= 16'd64737;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln389_reg_369_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_16_reg_164 <= acc_4_V_fu_363_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_16_reg_164 <= 16'd65213;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln389_reg_369_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_reg_216 <= acc_0_V_fu_339_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_reg_216 <= 16'd64870;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln389_reg_369 <= icmp_ln389_fu_270_p2;
        icmp_ln389_reg_369_pp0_iter1_reg <= icmp_ln389_reg_369;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln389_reg_369_pp0_iter2_reg <= icmp_ln389_reg_369_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln389_reg_369 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_18_reg_403 <= data_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln389_reg_369 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w17_V_load_1_reg_417 <= w17_V_q1;
        w17_V_load_2_reg_422 <= w17_V_q2;
        w17_V_load_3_reg_427 <= w17_V_q3;
        w17_V_load_4_reg_432 <= w17_V_q4;
        w17_V_load_reg_412 <= w17_V_q0;
    end
end

always @ (*) begin
    if ((icmp_ln389_fu_270_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln389_reg_369 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_V_blk_n = data_V_V_empty_n;
    end else begin
        data_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln389_reg_369 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_V_read = 1'b1;
    end else begin
        data_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp51) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_240_ap_ce = 1'b1;
    end else begin
        grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_240_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp52) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_246_ap_ce = 1'b1;
    end else begin
        grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_246_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp53) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_252_ap_ce = 1'b1;
    end else begin
        grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_252_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp54) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_258_ap_ce = 1'b1;
    end else begin
        grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_258_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp55) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_264_ap_ce = 1'b1;
    end else begin
        grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_264_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        res_V_V_blk_n = res_V_V_full_n;
    end else begin
        res_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((res_V_V_full_n == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            res_V_V_din = tmp_V_16_reg_164;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            res_V_V_din = tmp_V_15_reg_177;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            res_V_V_din = tmp_V_14_reg_190;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            res_V_V_din = tmp_V_13_reg_203;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            res_V_V_din = tmp_V_reg_216;
        end else begin
            res_V_V_din = 'bx;
        end
    end else begin
        res_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7)))) begin
        res_V_V_write = 1'b1;
    end else begin
        res_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w17_V_ce0 = 1'b1;
    end else begin
        w17_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w17_V_ce1 = 1'b1;
    end else begin
        w17_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w17_V_ce2 = 1'b1;
    end else begin
        w17_V_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w17_V_ce3 = 1'b1;
    end else begin
        w17_V_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w17_V_ce4 = 1'b1;
    end else begin
        w17_V_ce4 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln389_fu_270_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln389_fu_270_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_0_V_fu_339_p2 = (grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_240_ap_return + tmp_V_reg_216);

assign acc_1_V_fu_345_p2 = (grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_246_ap_return + tmp_V_13_reg_203);

assign acc_2_V_fu_351_p2 = (grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_252_ap_return + tmp_V_14_reg_190);

assign acc_3_V_fu_357_p2 = (grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_258_ap_return + tmp_V_15_reg_177);

assign acc_4_V_fu_363_p2 = (grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_264_ap_return + tmp_V_16_reg_164);

assign add_ln398_1_fu_306_p2 = ($signed(zext_ln389_1_fu_286_p1) + $signed(13'd4608));

assign add_ln398_2_fu_317_p2 = (zext_ln389_fu_282_p1 + 14'd6912);

assign add_ln398_3_fu_328_p2 = ($signed(zext_ln389_fu_282_p1) + $signed(14'd9216));

assign add_ln398_fu_295_p2 = (zext_ln389_1_fu_286_p1 + 13'd2304);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln389_reg_369 == 1'd0) & (data_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp51 = ((icmp_ln389_reg_369 == 1'd0) & (data_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp52 = ((icmp_ln389_reg_369 == 1'd0) & (data_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp53 = ((icmp_ln389_reg_369 == 1'd0) & (data_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp54 = ((icmp_ln389_reg_369 == 1'd0) & (data_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp55 = ((icmp_ln389_reg_369 == 1'd0) & (data_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln389_reg_369 == 1'd0) & (data_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0_ignore_call14 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0_ignore_call26 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0_ignore_call32 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0_ignore_call8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln389_reg_369 == 1'd0) & (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1_ignore_call14 = ((icmp_ln389_reg_369 == 1'd0) & (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1_ignore_call20 = ((icmp_ln389_reg_369 == 1'd0) & (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1_ignore_call26 = ((icmp_ln389_reg_369 == 1'd0) & (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1_ignore_call32 = ((icmp_ln389_reg_369 == 1'd0) & (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1_ignore_call8 = ((icmp_ln389_reg_369 == 1'd0) & (data_V_V_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2_ignore_call14 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2_ignore_call26 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2_ignore_call32 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2_ignore_call8 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3_ignore_call14 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3_ignore_call26 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3_ignore_call32 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3_ignore_call8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_in_fu_276_p2 = (i_in_0_reg_229 + 12'd1);

assign icmp_ln389_fu_270_p2 = ((i_in_0_reg_229 == 12'd2304) ? 1'b1 : 1'b0);

assign start_out = real_start;

assign w17_V_address0 = zext_ln399_fu_290_p1;

assign w17_V_address1 = zext_ln399_1_fu_301_p1;

assign w17_V_address2 = zext_ln399_2_fu_312_p1;

assign w17_V_address3 = zext_ln399_3_fu_323_p1;

assign w17_V_address4 = zext_ln399_4_fu_334_p1;

assign zext_ln389_1_fu_286_p1 = i_in_0_reg_229;

assign zext_ln389_fu_282_p1 = i_in_0_reg_229;

assign zext_ln399_1_fu_301_p1 = add_ln398_fu_295_p2;

assign zext_ln399_2_fu_312_p1 = add_ln398_1_fu_306_p2;

assign zext_ln399_3_fu_323_p1 = add_ln398_2_fu_317_p2;

assign zext_ln399_4_fu_334_p1 = add_ln398_3_fu_328_p2;

assign zext_ln399_fu_290_p1 = i_in_0_reg_229;

endmodule //dense_ss_ap_fixed_ap_fixed_16_4_5_3_0_config17_s
