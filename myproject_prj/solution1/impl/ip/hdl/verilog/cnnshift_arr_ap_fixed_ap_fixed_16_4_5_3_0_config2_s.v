// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_address0,
        data_V_ce0,
        data_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        output_V_q0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] data_V_address0;
output   data_V_ce0;
input  [15:0] data_V_q0;
output  [4:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [15:0] output_V_d0;
input  [15:0] output_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_ce0;
reg[4:0] output_V_address0;
reg output_V_ce0;
reg output_V_we0;
reg[15:0] output_V_d0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    layer_in_row_Array_V_1_0_0_ce0;
reg    layer_in_row_Array_V_1_0_0_we0;
wire   [15:0] layer_in_row_Array_V_1_0_0_q0;
reg    layer_in_row_Array_V_1_0_1_ce0;
reg    layer_in_row_Array_V_1_0_1_we0;
wire   [15:0] layer_in_row_Array_V_1_0_1_q0;
reg    layer_in_row_Array_V_1_0_2_ce0;
reg    layer_in_row_Array_V_1_0_2_we0;
wire   [15:0] layer_in_row_Array_V_1_0_2_q0;
reg    layer_in_row_Array_V_1_1_0_ce0;
reg    layer_in_row_Array_V_1_1_0_we0;
wire   [15:0] layer_in_row_Array_V_1_1_0_q0;
reg    layer_in_row_Array_V_1_1_1_ce0;
reg    layer_in_row_Array_V_1_1_1_we0;
wire   [15:0] layer_in_row_Array_V_1_1_1_q0;
reg    layer_in_row_Array_V_1_1_2_ce0;
reg    layer_in_row_Array_V_1_1_2_we0;
wire   [15:0] layer_in_row_Array_V_1_1_2_q0;
wire   [1:0] i0_fu_247_p2;
reg   [1:0] i0_reg_655;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln151_fu_241_p2;
wire   [4:0] zext_ln203_fu_258_p1;
reg   [4:0] zext_ln203_reg_665;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln154_fu_277_p2;
wire    ap_CS_fsm_state5;
wire   [0:0] trunc_ln157_fu_321_p1;
reg   [1:0] i0_0_reg_144;
wire   [4:0] add_ln203_3_fu_413_p2;
reg   [4:0] add_ln203_3_reg_712;
wire   [1:0] i1_fu_418_p2;
reg   [1:0] i1_reg_717;
wire   [1:0] i0_3_fu_438_p2;
reg   [1:0] i0_3_reg_725;
wire    ap_CS_fsm_state7;
wire  signed [4:0] sext_ln126_fu_466_p1;
reg  signed [4:0] sext_ln126_reg_730;
wire   [0:0] icmp_ln122_fu_432_p2;
wire   [4:0] zext_ln126_14_fu_476_p1;
reg   [4:0] zext_ln126_14_reg_735;
wire   [1:0] i1_6_fu_486_p2;
reg   [1:0] i1_6_reg_743;
wire    ap_CS_fsm_state8;
wire   [4:0] or_ln1_fu_492_p4;
reg   [4:0] or_ln1_reg_748;
wire   [0:0] icmp_ln124_fu_480_p2;
wire   [5:0] zext_ln126_15_fu_502_p1;
reg   [5:0] zext_ln126_15_reg_753;
wire   [1:0] i2_3_fu_516_p2;
reg   [1:0] i2_3_reg_761;
wire    ap_CS_fsm_state9;
wire   [5:0] add_ln126_10_fu_531_p2;
reg   [5:0] add_ln126_10_reg_766;
wire   [0:0] icmp_ln125_fu_510_p2;
wire   [1:0] i1_5_fu_565_p2;
reg   [1:0] i1_5_reg_779;
wire    ap_CS_fsm_state11;
wire   [4:0] or_ln_fu_571_p4;
reg   [4:0] or_ln_reg_784;
wire   [0:0] icmp_ln131_fu_559_p2;
wire   [4:0] sub_ln203_fu_597_p2;
reg   [4:0] sub_ln203_reg_789;
wire   [1:0] i2_fu_613_p2;
reg   [1:0] i2_reg_797;
wire    ap_CS_fsm_state12;
wire   [4:0] add_ln134_1_fu_629_p2;
reg   [4:0] add_ln134_1_reg_802;
wire   [0:0] icmp_ln133_fu_607_p2;
reg   [3:0] tmpinput_V_address0;
reg    tmpinput_V_ce0;
reg    tmpinput_V_we0;
reg   [15:0] tmpinput_V_d0;
wire   [15:0] tmpinput_V_q0;
reg   [1:0] i1_0_reg_156;
wire    ap_CS_fsm_state6;
reg   [15:0] DataOut_V_0_reg_168;
reg   [1:0] i0_0_i_reg_186;
reg   [1:0] i1_0_i_reg_197;
reg   [1:0] i2_0_i_reg_208;
wire    ap_CS_fsm_state10;
reg   [1:0] i11_0_i_reg_219;
reg   [1:0] i22_0_i_reg_230;
wire    ap_CS_fsm_state13;
wire   [63:0] zext_ln153_fu_253_p1;
wire   [63:0] zext_ln203_11_fu_272_p1;
wire  signed [63:0] sext_ln156_fu_316_p1;
wire  signed [63:0] sext_ln203_fu_424_p1;
wire   [63:0] zext_ln126_4_fu_546_p1;
wire   [63:0] zext_ln126_fu_554_p1;
wire  signed [63:0] sext_ln203_1_fu_643_p1;
wire   [63:0] zext_ln134_fu_648_p1;
wire   [3:0] zext_ln203_10_fu_262_p1;
wire   [3:0] add_ln203_fu_266_p2;
wire   [1:0] xor_ln156_fu_283_p2;
wire   [3:0] tmp_12_fu_293_p3;
wire   [4:0] zext_ln156_3_fu_301_p1;
wire   [4:0] zext_ln156_fu_289_p1;
wire   [4:0] sub_ln156_fu_305_p2;
wire   [4:0] add_ln156_fu_311_p2;
wire   [1:0] sub_ln158_fu_385_p2;
wire   [3:0] tmp_14_fu_395_p3;
wire   [4:0] zext_ln203_15_fu_403_p1;
wire   [4:0] zext_ln203_14_fu_391_p1;
wire   [4:0] sub_ln203_1_fu_407_p2;
wire   [0:0] trunc_ln126_fu_444_p1;
wire   [2:0] shl_ln_fu_448_p3;
wire   [3:0] zext_ln126_13_fu_456_p1;
wire   [3:0] zext_ln122_fu_428_p1;
wire  signed [3:0] sub_ln126_fu_460_p2;
wire   [3:0] add_ln126_fu_470_p2;
wire   [4:0] zext_ln125_fu_506_p1;
wire   [4:0] add_ln126_9_fu_522_p2;
wire  signed [5:0] sext_ln126_4_fu_527_p1;
wire   [4:0] add_ln126_11_fu_536_p2;
wire   [4:0] add_ln126_12_fu_541_p2;
wire  signed [31:0] sext_ln126_3_fu_551_p1;
wire   [3:0] tmp_13_fu_585_p3;
wire   [4:0] zext_ln203_13_fu_593_p1;
wire   [4:0] zext_ln203_12_fu_581_p1;
wire   [3:0] zext_ln133_fu_603_p1;
wire   [3:0] add_ln134_fu_619_p2;
wire   [4:0] zext_ln134_6_fu_625_p1;
wire   [4:0] zext_ln203_16_fu_634_p1;
wire   [4:0] add_ln203_4_fu_638_p2;
reg   [12:0] ap_NS_fsm;
reg    ap_condition_166;
reg    ap_condition_151;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config2_s_layerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 34 ),
    .AddressWidth( 6 ))
layer_in_row_Array_V_1_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd33),
    .ce0(layer_in_row_Array_V_1_0_0_ce0),
    .we0(layer_in_row_Array_V_1_0_0_we0),
    .d0(tmpinput_V_q0),
    .q0(layer_in_row_Array_V_1_0_0_q0)
);

cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config2_s_layerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 34 ),
    .AddressWidth( 6 ))
layer_in_row_Array_V_1_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd33),
    .ce0(layer_in_row_Array_V_1_0_1_ce0),
    .we0(layer_in_row_Array_V_1_0_1_we0),
    .d0(tmpinput_V_q0),
    .q0(layer_in_row_Array_V_1_0_1_q0)
);

cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config2_s_layerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 34 ),
    .AddressWidth( 6 ))
layer_in_row_Array_V_1_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd33),
    .ce0(layer_in_row_Array_V_1_0_2_ce0),
    .we0(layer_in_row_Array_V_1_0_2_we0),
    .d0(tmpinput_V_q0),
    .q0(layer_in_row_Array_V_1_0_2_q0)
);

cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config2_s_layerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 34 ),
    .AddressWidth( 6 ))
layer_in_row_Array_V_1_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd33),
    .ce0(layer_in_row_Array_V_1_1_0_ce0),
    .we0(layer_in_row_Array_V_1_1_0_we0),
    .d0(tmpinput_V_q0),
    .q0(layer_in_row_Array_V_1_1_0_q0)
);

cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config2_s_layerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 34 ),
    .AddressWidth( 6 ))
layer_in_row_Array_V_1_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd33),
    .ce0(layer_in_row_Array_V_1_1_1_ce0),
    .we0(layer_in_row_Array_V_1_1_1_we0),
    .d0(tmpinput_V_q0),
    .q0(layer_in_row_Array_V_1_1_1_q0)
);

cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config2_s_layerbkb #(
    .DataWidth( 16 ),
    .AddressRange( 34 ),
    .AddressWidth( 6 ))
layer_in_row_Array_V_1_1_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd33),
    .ce0(layer_in_row_Array_V_1_1_2_ce0),
    .we0(layer_in_row_Array_V_1_1_2_we0),
    .d0(tmpinput_V_q0),
    .q0(layer_in_row_Array_V_1_1_2_q0)
);

cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config2_s_tmpinhbi #(
    .DataWidth( 16 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
tmpinput_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmpinput_V_address0),
    .ce0(tmpinput_V_ce0),
    .we0(tmpinput_V_we0),
    .d0(tmpinput_V_d0),
    .q0(tmpinput_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if (((i0_0_reg_144 == 2'd0) & (trunc_ln157_fu_321_p1 == 1'd0))) begin
            DataOut_V_0_reg_168 <= layer_in_row_Array_V_1_1_0_q0;
        end else if (((i0_0_reg_144 == 2'd1) & (trunc_ln157_fu_321_p1 == 1'd0))) begin
            DataOut_V_0_reg_168 <= layer_in_row_Array_V_1_1_1_q0;
        end else if ((1'b1 == ap_condition_151)) begin
            DataOut_V_0_reg_168 <= layer_in_row_Array_V_1_1_2_q0;
        end else if (((i0_0_reg_144 == 2'd0) & (trunc_ln157_fu_321_p1 == 1'd1))) begin
            DataOut_V_0_reg_168 <= layer_in_row_Array_V_1_0_0_q0;
        end else if (((i0_0_reg_144 == 2'd1) & (trunc_ln157_fu_321_p1 == 1'd1))) begin
            DataOut_V_0_reg_168 <= layer_in_row_Array_V_1_0_1_q0;
        end else if ((1'b1 == ap_condition_166)) begin
            DataOut_V_0_reg_168 <= layer_in_row_Array_V_1_0_2_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln151_fu_241_p2 == 1'd1))) begin
        i0_0_i_reg_186 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln124_fu_480_p2 == 1'd1))) begin
        i0_0_i_reg_186 <= i0_3_reg_725;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln154_fu_277_p2 == 1'd1))) begin
        i0_0_reg_144 <= i0_reg_655;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i0_0_reg_144 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln122_fu_432_p2 == 1'd1))) begin
        i11_0_i_reg_219 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln133_fu_607_p2 == 1'd1))) begin
        i11_0_i_reg_219 <= i1_5_reg_779;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln125_fu_510_p2 == 1'd1))) begin
        i1_0_i_reg_197 <= i1_6_reg_743;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln122_fu_432_p2 == 1'd0))) begin
        i1_0_i_reg_197 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i1_0_reg_156 <= i1_reg_717;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i1_0_reg_156 <= 2'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln131_fu_559_p2 == 1'd0))) begin
        i22_0_i_reg_230 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        i22_0_i_reg_230 <= i2_reg_797;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln124_fu_480_p2 == 1'd0))) begin
        i2_0_i_reg_208 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i2_0_i_reg_208 <= i2_3_reg_761;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln125_fu_510_p2 == 1'd0))) begin
        add_ln126_10_reg_766 <= add_ln126_10_fu_531_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln133_fu_607_p2 == 1'd0))) begin
        add_ln134_1_reg_802 <= add_ln134_1_fu_629_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln203_3_reg_712 <= add_ln203_3_fu_413_p2;
        i1_reg_717 <= i1_fu_418_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i0_3_reg_725 <= i0_3_fu_438_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i0_reg_655 <= i0_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i1_5_reg_779 <= i1_5_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i1_6_reg_743 <= i1_6_fu_486_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i2_3_reg_761 <= i2_3_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i2_reg_797 <= i2_fu_613_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln124_fu_480_p2 == 1'd0))) begin
        or_ln1_reg_748[1 : 0] <= or_ln1_fu_492_p4[1 : 0];
or_ln1_reg_748[4 : 3] <= or_ln1_fu_492_p4[4 : 3];
        zext_ln126_15_reg_753[1 : 0] <= zext_ln126_15_fu_502_p1[1 : 0];
zext_ln126_15_reg_753[4 : 3] <= zext_ln126_15_fu_502_p1[4 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln131_fu_559_p2 == 1'd0))) begin
        or_ln_reg_784[1 : 0] <= or_ln_fu_571_p4[1 : 0];
or_ln_reg_784[4 : 3] <= or_ln_fu_571_p4[4 : 3];
        sub_ln203_reg_789 <= sub_ln203_fu_597_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln122_fu_432_p2 == 1'd0))) begin
        sext_ln126_reg_730 <= sext_ln126_fu_466_p1;
        zext_ln126_14_reg_735[3 : 0] <= zext_ln126_14_fu_476_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zext_ln203_reg_665[1 : 0] <= zext_ln203_fu_258_p1[1 : 0];
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & (icmp_ln131_fu_559_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln131_fu_559_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (i0_0_reg_144 == 2'd0) & (trunc_ln157_fu_321_p1 == 1'd1))) begin
        layer_in_row_Array_V_1_0_0_ce0 = 1'd1;
    end else begin
        layer_in_row_Array_V_1_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (i0_0_reg_144 == 2'd0) & (trunc_ln157_fu_321_p1 == 1'd1))) begin
        layer_in_row_Array_V_1_0_0_we0 = 1'd1;
    end else begin
        layer_in_row_Array_V_1_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (i0_0_reg_144 == 2'd1) & (trunc_ln157_fu_321_p1 == 1'd1))) begin
        layer_in_row_Array_V_1_0_1_ce0 = 1'd1;
    end else begin
        layer_in_row_Array_V_1_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (i0_0_reg_144 == 2'd1) & (trunc_ln157_fu_321_p1 == 1'd1))) begin
        layer_in_row_Array_V_1_0_1_we0 = 1'd1;
    end else begin
        layer_in_row_Array_V_1_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(i0_0_reg_144 == 2'd0) & ~(i0_0_reg_144 == 2'd1) & (1'b1 == ap_CS_fsm_state5) & (trunc_ln157_fu_321_p1 == 1'd1))) begin
        layer_in_row_Array_V_1_0_2_ce0 = 1'd1;
    end else begin
        layer_in_row_Array_V_1_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(i0_0_reg_144 == 2'd0) & ~(i0_0_reg_144 == 2'd1) & (1'b1 == ap_CS_fsm_state5) & (trunc_ln157_fu_321_p1 == 1'd1))) begin
        layer_in_row_Array_V_1_0_2_we0 = 1'd1;
    end else begin
        layer_in_row_Array_V_1_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (i0_0_reg_144 == 2'd0) & (trunc_ln157_fu_321_p1 == 1'd0))) begin
        layer_in_row_Array_V_1_1_0_ce0 = 1'd1;
    end else begin
        layer_in_row_Array_V_1_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (i0_0_reg_144 == 2'd0) & (trunc_ln157_fu_321_p1 == 1'd0))) begin
        layer_in_row_Array_V_1_1_0_we0 = 1'd1;
    end else begin
        layer_in_row_Array_V_1_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (i0_0_reg_144 == 2'd1) & (trunc_ln157_fu_321_p1 == 1'd0))) begin
        layer_in_row_Array_V_1_1_1_ce0 = 1'd1;
    end else begin
        layer_in_row_Array_V_1_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (i0_0_reg_144 == 2'd1) & (trunc_ln157_fu_321_p1 == 1'd0))) begin
        layer_in_row_Array_V_1_1_1_we0 = 1'd1;
    end else begin
        layer_in_row_Array_V_1_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(i0_0_reg_144 == 2'd0) & ~(i0_0_reg_144 == 2'd1) & (1'b1 == ap_CS_fsm_state5) & (trunc_ln157_fu_321_p1 == 1'd0))) begin
        layer_in_row_Array_V_1_1_2_ce0 = 1'd1;
    end else begin
        layer_in_row_Array_V_1_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(i0_0_reg_144 == 2'd0) & ~(i0_0_reg_144 == 2'd1) & (1'b1 == ap_CS_fsm_state5) & (trunc_ln157_fu_321_p1 == 1'd0))) begin
        layer_in_row_Array_V_1_1_2_we0 = 1'd1;
    end else begin
        layer_in_row_Array_V_1_1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_address0 = zext_ln134_fu_648_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_V_address0 = zext_ln126_fu_554_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_V_address0 = zext_ln126_4_fu_546_p1;
    end else begin
        output_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_d0 = tmpinput_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_V_d0 = output_V_q0;
    end else begin
        output_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmpinput_V_address0 = sext_ln203_1_fu_643_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tmpinput_V_address0 = sext_ln203_fu_424_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmpinput_V_address0 = sext_ln156_fu_316_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        tmpinput_V_address0 = zext_ln203_11_fu_272_p1;
    end else begin
        tmpinput_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        tmpinput_V_ce0 = 1'b1;
    end else begin
        tmpinput_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmpinput_V_d0 = DataOut_V_0_reg_168;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        tmpinput_V_d0 = data_V_q0;
    end else begin
        tmpinput_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        tmpinput_V_we0 = 1'b1;
    end else begin
        tmpinput_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln151_fu_241_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln154_fu_277_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln122_fu_432_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln124_fu_480_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln125_fu_510_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln131_fu_559_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln133_fu_607_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln126_10_fu_531_p2 = ($signed(sext_ln126_4_fu_527_p1) + $signed(zext_ln126_15_reg_753));

assign add_ln126_11_fu_536_p2 = (zext_ln126_14_reg_735 + zext_ln125_fu_506_p1);

assign add_ln126_12_fu_541_p2 = (add_ln126_11_fu_536_p2 + or_ln1_reg_748);

assign add_ln126_9_fu_522_p2 = ($signed(sext_ln126_reg_730) + $signed(zext_ln125_fu_506_p1));

assign add_ln126_fu_470_p2 = ($signed(4'd3) + $signed(sub_ln126_fu_460_p2));

assign add_ln134_1_fu_629_p2 = (or_ln_reg_784 + zext_ln134_6_fu_625_p1);

assign add_ln134_fu_619_p2 = (zext_ln133_fu_603_p1 + 4'd6);

assign add_ln156_fu_311_p2 = (zext_ln203_reg_665 + sub_ln156_fu_305_p2);

assign add_ln203_3_fu_413_p2 = (sub_ln203_1_fu_407_p2 + zext_ln203_reg_665);

assign add_ln203_4_fu_638_p2 = (sub_ln203_reg_789 + zext_ln203_16_fu_634_p1);

assign add_ln203_fu_266_p2 = (zext_ln203_10_fu_262_p1 + 4'd6);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_condition_151 = (~(i0_0_reg_144 == 2'd0) & ~(i0_0_reg_144 == 2'd1) & (trunc_ln157_fu_321_p1 == 1'd0));
end

always @ (*) begin
    ap_condition_166 = (~(i0_0_reg_144 == 2'd0) & ~(i0_0_reg_144 == 2'd1) & (trunc_ln157_fu_321_p1 == 1'd1));
end

assign data_V_address0 = zext_ln153_fu_253_p1;

assign i0_3_fu_438_p2 = (i0_0_i_reg_186 + 2'd1);

assign i0_fu_247_p2 = (i0_0_reg_144 + 2'd1);

assign i1_5_fu_565_p2 = (i11_0_i_reg_219 + 2'd1);

assign i1_6_fu_486_p2 = (i1_0_i_reg_197 + 2'd1);

assign i1_fu_418_p2 = (i1_0_reg_156 + 2'd1);

assign i2_3_fu_516_p2 = (i2_0_i_reg_208 + 2'd1);

assign i2_fu_613_p2 = (i22_0_i_reg_230 + 2'd1);

assign icmp_ln122_fu_432_p2 = ((i0_0_i_reg_186 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln124_fu_480_p2 = ((i1_0_i_reg_197 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln125_fu_510_p2 = ((i2_0_i_reg_208 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln131_fu_559_p2 = ((i11_0_i_reg_219 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln133_fu_607_p2 = ((i22_0_i_reg_230 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln151_fu_241_p2 = ((i0_0_reg_144 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln154_fu_277_p2 = ((i1_0_reg_156 == 2'd3) ? 1'b1 : 1'b0);

assign or_ln1_fu_492_p4 = {{{i1_0_i_reg_197}, {1'd0}}, {i1_0_i_reg_197}};

assign or_ln_fu_571_p4 = {{{i11_0_i_reg_219}, {1'd0}}, {i11_0_i_reg_219}};

assign sext_ln126_3_fu_551_p1 = $signed(add_ln126_10_reg_766);

assign sext_ln126_4_fu_527_p1 = $signed(add_ln126_9_fu_522_p2);

assign sext_ln126_fu_466_p1 = sub_ln126_fu_460_p2;

assign sext_ln156_fu_316_p1 = $signed(add_ln156_fu_311_p2);

assign sext_ln203_1_fu_643_p1 = $signed(add_ln203_4_fu_638_p2);

assign sext_ln203_fu_424_p1 = $signed(add_ln203_3_reg_712);

assign shl_ln_fu_448_p3 = {{trunc_ln126_fu_444_p1}, {2'd0}};

assign sub_ln126_fu_460_p2 = (zext_ln126_13_fu_456_p1 - zext_ln122_fu_428_p1);

assign sub_ln156_fu_305_p2 = (zext_ln156_3_fu_301_p1 - zext_ln156_fu_289_p1);

assign sub_ln158_fu_385_p2 = ($signed(2'd2) - $signed(i1_0_reg_156));

assign sub_ln203_1_fu_407_p2 = (zext_ln203_15_fu_403_p1 - zext_ln203_14_fu_391_p1);

assign sub_ln203_fu_597_p2 = (zext_ln203_13_fu_593_p1 - zext_ln203_12_fu_581_p1);

assign tmp_12_fu_293_p3 = {{xor_ln156_fu_283_p2}, {2'd0}};

assign tmp_13_fu_585_p3 = {{i11_0_i_reg_219}, {2'd0}};

assign tmp_14_fu_395_p3 = {{sub_ln158_fu_385_p2}, {2'd0}};

assign trunc_ln126_fu_444_p1 = i0_0_i_reg_186[0:0];

assign trunc_ln157_fu_321_p1 = i1_0_reg_156[0:0];

assign xor_ln156_fu_283_p2 = (i1_0_reg_156 ^ 2'd3);

assign zext_ln122_fu_428_p1 = i0_0_i_reg_186;

assign zext_ln125_fu_506_p1 = i2_0_i_reg_208;

assign zext_ln126_13_fu_456_p1 = shl_ln_fu_448_p3;

assign zext_ln126_14_fu_476_p1 = add_ln126_fu_470_p2;

assign zext_ln126_15_fu_502_p1 = or_ln1_fu_492_p4;

assign zext_ln126_4_fu_546_p1 = add_ln126_12_fu_541_p2;

assign zext_ln126_fu_554_p1 = $unsigned(sext_ln126_3_fu_551_p1);

assign zext_ln133_fu_603_p1 = i22_0_i_reg_230;

assign zext_ln134_6_fu_625_p1 = add_ln134_fu_619_p2;

assign zext_ln134_fu_648_p1 = add_ln134_1_reg_802;

assign zext_ln153_fu_253_p1 = i0_0_reg_144;

assign zext_ln156_3_fu_301_p1 = tmp_12_fu_293_p3;

assign zext_ln156_fu_289_p1 = xor_ln156_fu_283_p2;

assign zext_ln203_10_fu_262_p1 = i0_0_reg_144;

assign zext_ln203_11_fu_272_p1 = add_ln203_fu_266_p2;

assign zext_ln203_12_fu_581_p1 = i11_0_i_reg_219;

assign zext_ln203_13_fu_593_p1 = tmp_13_fu_585_p3;

assign zext_ln203_14_fu_391_p1 = sub_ln158_fu_385_p2;

assign zext_ln203_15_fu_403_p1 = tmp_14_fu_395_p3;

assign zext_ln203_16_fu_634_p1 = i22_0_i_reg_230;

assign zext_ln203_fu_258_p1 = i0_0_reg_144;

always @ (posedge ap_clk) begin
    zext_ln203_reg_665[4:2] <= 3'b000;
    zext_ln126_14_reg_735[4] <= 1'b0;
    or_ln1_reg_748[2] <= 1'b0;
    zext_ln126_15_reg_753[2] <= 1'b0;
    zext_ln126_15_reg_753[5] <= 1'b0;
    or_ln_reg_784[2] <= 1'b0;
end

endmodule //cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config2_s
