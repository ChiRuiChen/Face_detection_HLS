-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_ss_ap_fixed_ap_fixed_16_4_5_3_0_config17_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_V_empty_n : IN STD_LOGIC;
    data_V_V_read : OUT STD_LOGIC;
    res_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_V_full_n : IN STD_LOGIC;
    res_V_V_write : OUT STD_LOGIC );
end;


architecture behav of dense_ss_ap_fixed_ap_fixed_16_4_5_3_0_config17_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_FEBD : STD_LOGIC_VECTOR (15 downto 0) := "1111111010111101";
    constant ap_const_lv16_FCE1 : STD_LOGIC_VECTOR (15 downto 0) := "1111110011100001";
    constant ap_const_lv16_FF96 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110010110";
    constant ap_const_lv16_28 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000101000";
    constant ap_const_lv16_FD66 : STD_LOGIC_VECTOR (15 downto 0) := "1111110101100110";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_900 : STD_LOGIC_VECTOR (11 downto 0) := "100100000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv13_900 : STD_LOGIC_VECTOR (12 downto 0) := "0100100000000";
    constant ap_const_lv13_1200 : STD_LOGIC_VECTOR (12 downto 0) := "1001000000000";
    constant ap_const_lv14_1B00 : STD_LOGIC_VECTOR (13 downto 0) := "01101100000000";
    constant ap_const_lv14_2400 : STD_LOGIC_VECTOR (13 downto 0) := "10010000000000";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal w17_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal w17_V_ce0 : STD_LOGIC;
    signal w17_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal w17_V_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal w17_V_ce1 : STD_LOGIC;
    signal w17_V_q1 : STD_LOGIC_VECTOR (5 downto 0);
    signal w17_V_address2 : STD_LOGIC_VECTOR (13 downto 0);
    signal w17_V_ce2 : STD_LOGIC;
    signal w17_V_q2 : STD_LOGIC_VECTOR (5 downto 0);
    signal w17_V_address3 : STD_LOGIC_VECTOR (13 downto 0);
    signal w17_V_ce3 : STD_LOGIC;
    signal w17_V_q3 : STD_LOGIC_VECTOR (5 downto 0);
    signal w17_V_address4 : STD_LOGIC_VECTOR (13 downto 0);
    signal w17_V_ce4 : STD_LOGIC;
    signal w17_V_q4 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln389_reg_369 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_V_16_reg_164 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_15_reg_177 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_14_reg_190 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_13_reg_203 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_reg_216 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_in_0_reg_229 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln389_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln389_reg_369_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln389_reg_369_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_in_fu_276_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_V_18_reg_403 : STD_LOGIC_VECTOR (15 downto 0);
    signal w17_V_load_reg_412 : STD_LOGIC_VECTOR (5 downto 0);
    signal w17_V_load_1_reg_417 : STD_LOGIC_VECTOR (5 downto 0);
    signal w17_V_load_2_reg_422 : STD_LOGIC_VECTOR (5 downto 0);
    signal w17_V_load_3_reg_427 : STD_LOGIC_VECTOR (5 downto 0);
    signal w17_V_load_4_reg_432 : STD_LOGIC_VECTOR (5 downto 0);
    signal acc_0_V_fu_339_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal acc_1_V_fu_345_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_2_V_fu_351_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_3_V_fu_357_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_4_V_fu_363_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_240_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_240_ap_ce : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0_ignore_call8 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1_ignore_call8 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2_ignore_call8 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3_ignore_call8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp51 : BOOLEAN;
    signal grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_246_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_246_ap_ce : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0_ignore_call14 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1_ignore_call14 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2_ignore_call14 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3_ignore_call14 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp52 : BOOLEAN;
    signal grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_252_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_252_ap_ce : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0_ignore_call20 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1_ignore_call20 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2_ignore_call20 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3_ignore_call20 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp53 : BOOLEAN;
    signal grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_258_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_258_ap_ce : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0_ignore_call26 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1_ignore_call26 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2_ignore_call26 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3_ignore_call26 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp54 : BOOLEAN;
    signal grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_264_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_264_ap_ce : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0_ignore_call32 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1_ignore_call32 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2_ignore_call32 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3_ignore_call32 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp55 : BOOLEAN;
    signal zext_ln399_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln399_1_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln399_2_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln399_3_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln399_4_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln389_1_fu_286_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln398_fu_295_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln398_1_fu_306_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln389_fu_282_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln398_2_fu_317_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln398_3_fu_328_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (15 downto 0);
        w_V : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component dense_ss_ap_fixed_ap_fixed_16_4_5_3_0_config17_s_w17_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address2 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address3 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address4 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    w17_V_U : component dense_ss_ap_fixed_ap_fixed_16_4_5_3_0_config17_s_w17_V
    generic map (
        DataWidth => 6,
        AddressRange => 11520,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w17_V_address0,
        ce0 => w17_V_ce0,
        q0 => w17_V_q0,
        address1 => w17_V_address1,
        ce1 => w17_V_ce1,
        q1 => w17_V_q1,
        address2 => w17_V_address2,
        ce2 => w17_V_ce2,
        q2 => w17_V_q2,
        address3 => w17_V_address3,
        ce3 => w17_V_ce3,
        q3 => w17_V_q3,
        address4 => w17_V_address4,
        ce4 => w17_V_ce4,
        q4 => w17_V_q4);

    grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_240 : component product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        a_V => tmp_V_18_reg_403,
        w_V => w17_V_load_reg_412,
        ap_return => grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_240_ap_return,
        ap_ce => grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_240_ap_ce);

    grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_246 : component product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        a_V => tmp_V_18_reg_403,
        w_V => w17_V_load_1_reg_417,
        ap_return => grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_246_ap_return,
        ap_ce => grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_246_ap_ce);

    grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_252 : component product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        a_V => tmp_V_18_reg_403,
        w_V => w17_V_load_2_reg_422,
        ap_return => grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_252_ap_return,
        ap_ce => grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_252_ap_ce);

    grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_258 : component product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        a_V => tmp_V_18_reg_403,
        w_V => w17_V_load_3_reg_427,
        ap_return => grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_258_ap_return,
        ap_ce => grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_258_ap_ce);

    grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_264 : component product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        a_V => tmp_V_18_reg_403,
        w_V => w17_V_load_4_reg_432,
        ap_return => grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_264_ap_return,
        ap_ce => grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_264_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_in_0_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln389_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_in_0_reg_229 <= i_in_fu_276_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_in_0_reg_229 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    tmp_V_13_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln389_reg_369_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_V_13_reg_203 <= acc_1_V_fu_345_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_V_13_reg_203 <= ap_const_lv16_28;
            end if; 
        end if;
    end process;

    tmp_V_14_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln389_reg_369_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_V_14_reg_190 <= acc_2_V_fu_351_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_V_14_reg_190 <= ap_const_lv16_FF96;
            end if; 
        end if;
    end process;

    tmp_V_15_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln389_reg_369_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_V_15_reg_177 <= acc_3_V_fu_357_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_V_15_reg_177 <= ap_const_lv16_FCE1;
            end if; 
        end if;
    end process;

    tmp_V_16_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln389_reg_369_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_V_16_reg_164 <= acc_4_V_fu_363_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_V_16_reg_164 <= ap_const_lv16_FEBD;
            end if; 
        end if;
    end process;

    tmp_V_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln389_reg_369_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_V_reg_216 <= acc_0_V_fu_339_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_V_reg_216 <= ap_const_lv16_FD66;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln389_reg_369 <= icmp_ln389_fu_270_p2;
                icmp_ln389_reg_369_pp0_iter1_reg <= icmp_ln389_reg_369;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln389_reg_369_pp0_iter2_reg <= icmp_ln389_reg_369_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln389_reg_369 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_V_18_reg_403 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln389_reg_369 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                w17_V_load_1_reg_417 <= w17_V_q1;
                w17_V_load_2_reg_422 <= w17_V_q2;
                w17_V_load_3_reg_427 <= w17_V_q3;
                w17_V_load_4_reg_432 <= w17_V_q4;
                w17_V_load_reg_412 <= w17_V_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, res_V_V_full_n, ap_enable_reg_pp0_iter1, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, icmp_ln389_fu_270_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln389_fu_270_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln389_fu_270_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    acc_0_V_fu_339_p2 <= std_logic_vector(unsigned(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_240_ap_return) + unsigned(tmp_V_reg_216));
    acc_1_V_fu_345_p2 <= std_logic_vector(unsigned(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_246_ap_return) + unsigned(tmp_V_13_reg_203));
    acc_2_V_fu_351_p2 <= std_logic_vector(unsigned(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_252_ap_return) + unsigned(tmp_V_14_reg_190));
    acc_3_V_fu_357_p2 <= std_logic_vector(unsigned(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_258_ap_return) + unsigned(tmp_V_15_reg_177));
    acc_4_V_fu_363_p2 <= std_logic_vector(unsigned(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_264_ap_return) + unsigned(tmp_V_16_reg_164));
    add_ln398_1_fu_306_p2 <= std_logic_vector(unsigned(zext_ln389_1_fu_286_p1) + unsigned(ap_const_lv13_1200));
    add_ln398_2_fu_317_p2 <= std_logic_vector(unsigned(zext_ln389_fu_282_p1) + unsigned(ap_const_lv14_1B00));
    add_ln398_3_fu_328_p2 <= std_logic_vector(unsigned(zext_ln389_fu_282_p1) + unsigned(ap_const_lv14_2400));
    add_ln398_fu_295_p2 <= std_logic_vector(unsigned(zext_ln389_1_fu_286_p1) + unsigned(ap_const_lv13_900));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(6);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(data_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln389_reg_369)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln389_reg_369 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp51_assign_proc : process(data_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln389_reg_369)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp51 <= ((icmp_ln389_reg_369 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp52_assign_proc : process(data_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln389_reg_369)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp52 <= ((icmp_ln389_reg_369 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp53_assign_proc : process(data_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln389_reg_369)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp53 <= ((icmp_ln389_reg_369 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp54_assign_proc : process(data_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln389_reg_369)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp54 <= ((icmp_ln389_reg_369 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp55_assign_proc : process(data_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln389_reg_369)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp55 <= ((icmp_ln389_reg_369 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(data_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln389_reg_369)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln389_reg_369 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0_ignore_call14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0_ignore_call26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0_ignore_call32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0_ignore_call8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(data_V_V_empty_n, icmp_ln389_reg_369)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln389_reg_369 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_ignore_call14_assign_proc : process(data_V_V_empty_n, icmp_ln389_reg_369)
    begin
                ap_block_state3_pp0_stage0_iter1_ignore_call14 <= ((icmp_ln389_reg_369 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_ignore_call20_assign_proc : process(data_V_V_empty_n, icmp_ln389_reg_369)
    begin
                ap_block_state3_pp0_stage0_iter1_ignore_call20 <= ((icmp_ln389_reg_369 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_ignore_call26_assign_proc : process(data_V_V_empty_n, icmp_ln389_reg_369)
    begin
                ap_block_state3_pp0_stage0_iter1_ignore_call26 <= ((icmp_ln389_reg_369 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_ignore_call32_assign_proc : process(data_V_V_empty_n, icmp_ln389_reg_369)
    begin
                ap_block_state3_pp0_stage0_iter1_ignore_call32 <= ((icmp_ln389_reg_369 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_ignore_call8_assign_proc : process(data_V_V_empty_n, icmp_ln389_reg_369)
    begin
                ap_block_state3_pp0_stage0_iter1_ignore_call8 <= ((icmp_ln389_reg_369 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2_ignore_call14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2_ignore_call26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2_ignore_call32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2_ignore_call8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3_ignore_call14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3_ignore_call26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3_ignore_call32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3_ignore_call8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln389_fu_270_p2)
    begin
        if ((icmp_ln389_fu_270_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, res_V_V_full_n, ap_CS_fsm_state10)
    begin
        if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_V_V_blk_n_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln389_reg_369)
    begin
        if (((icmp_ln389_reg_369 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_V_blk_n <= data_V_V_empty_n;
        else 
            data_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln389_reg_369, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln389_reg_369 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_V_read <= ap_const_logic_1;
        else 
            data_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_240_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp51)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp51) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_240_ap_ce <= ap_const_logic_1;
        else 
            grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_240_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_246_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp52)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp52) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_246_ap_ce <= ap_const_logic_1;
        else 
            grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_246_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_252_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp53)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp53) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_252_ap_ce <= ap_const_logic_1;
        else 
            grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_252_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_258_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp54)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp54) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_258_ap_ce <= ap_const_logic_1;
        else 
            grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_258_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_264_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp55)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp55) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_264_ap_ce <= ap_const_logic_1;
        else 
            grp_product_dense_ap_fixed_ap_fixed_ap_fixed_16_4_5_3_0_s_fu_264_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_in_fu_276_p2 <= std_logic_vector(unsigned(i_in_0_reg_229) + unsigned(ap_const_lv12_1));
    icmp_ln389_fu_270_p2 <= "1" when (i_in_0_reg_229 = ap_const_lv12_900) else "0";

    internal_ap_ready_assign_proc : process(res_V_V_full_n, ap_CS_fsm_state10)
    begin
        if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_V_blk_n_assign_proc : process(res_V_V_full_n, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            res_V_V_blk_n <= res_V_V_full_n;
        else 
            res_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    res_V_V_din_assign_proc : process(res_V_V_full_n, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, tmp_V_16_reg_164, tmp_V_15_reg_177, tmp_V_14_reg_190, tmp_V_13_reg_203, tmp_V_reg_216)
    begin
        if ((res_V_V_full_n = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                res_V_V_din <= tmp_V_16_reg_164;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                res_V_V_din <= tmp_V_15_reg_177;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                res_V_V_din <= tmp_V_14_reg_190;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                res_V_V_din <= tmp_V_13_reg_203;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                res_V_V_din <= tmp_V_reg_216;
            else 
                res_V_V_din <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            res_V_V_din <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    res_V_V_write_assign_proc : process(res_V_V_full_n, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            res_V_V_write <= ap_const_logic_1;
        else 
            res_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    w17_V_address0 <= zext_ln399_fu_290_p1(14 - 1 downto 0);
    w17_V_address1 <= zext_ln399_1_fu_301_p1(14 - 1 downto 0);
    w17_V_address2 <= zext_ln399_2_fu_312_p1(14 - 1 downto 0);
    w17_V_address3 <= zext_ln399_3_fu_323_p1(14 - 1 downto 0);
    w17_V_address4 <= zext_ln399_4_fu_334_p1(14 - 1 downto 0);

    w17_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            w17_V_ce0 <= ap_const_logic_1;
        else 
            w17_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w17_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            w17_V_ce1 <= ap_const_logic_1;
        else 
            w17_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w17_V_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            w17_V_ce2 <= ap_const_logic_1;
        else 
            w17_V_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    w17_V_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            w17_V_ce3 <= ap_const_logic_1;
        else 
            w17_V_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    w17_V_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            w17_V_ce4 <= ap_const_logic_1;
        else 
            w17_V_ce4 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln389_1_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_in_0_reg_229),13));
    zext_ln389_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_in_0_reg_229),14));
    zext_ln399_1_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln398_fu_295_p2),64));
    zext_ln399_2_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln398_1_fu_306_p2),64));
    zext_ln399_3_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln398_2_fu_317_p2),64));
    zext_ln399_4_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln398_3_fu_328_p2),64));
    zext_ln399_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_in_0_reg_229),64));
end behav;
